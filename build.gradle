plugins {
    id "java-library"
    id "application"
    id "maven-publish"
}

repositories {
    ivy {
        name "Cosmic Reach"
        url "https://cosmic-archive.netlify.app/"
        patternLayout {
            artifact "/Cosmic Reach-[revision].jar"
        }
        // This is required in Gradle 6.0+ as metadata file (ivy.xml) is mandatory
        metadataSources {
            artifact()
        }

        content {
            includeGroup "finalforeach"
        }
    }

    maven {
        name "JitPack"
        url "https://jitpack.io"
    }
    maven {
        name "Quilt"
        url "https://maven.quiltmc.org/repository/release"
    }
    maven {
        name "Fabric"
        url "https://maven.fabricmc.net/"
    }
    maven {
        name "Sponge"
        url "https://repo.spongepowered.org/maven/"
    }

    mavenCentral()
}


configurations {
    cosmicreach
}


dependencies {
    // Cosmic Reach jar
    cosmicreach "finalforeach:cosmicreach:${cosmic_reach_version}" // Allows it to be used later in the gradle configuration
    implementation "finalforeach:cosmicreach:${cosmic_reach_version}" // Allows it to be referenced in the code

    // Cosmic Quilt
    implementation "org.codeberg.CRModders:cosmic-quilt:${cosmic_quilt_version}"

    //  The dependencies below are part of Cosmic Quilt
    // Quilt Loader
    implementation "org.quiltmc:quilt-loader:${quilt_loader_version}"
    implementation "org.quiltmc:quilt-json5:${quilt_json_version}"
    implementation "org.quiltmc:tiny-remapper:${quilt_remapper_version}"
    implementation "org.quiltmc:quilt-config:${quilt_config_version}"
    implementation "net.fabricmc:access-widener:${fabric_accesswidener_version}"
    // Slf4j
    implementation "org.slf4j:slf4j-api:${slf4j_version}"
    implementation "org.slf4j:slf4j-jdk14:${slf4j_version}"
    implementation "uk.org.lidalia:sysout-over-slf4j:${slf4j_sysout_helper_version}"
    // Mixins
    implementation "org.spongepowered:mixin:${mixin_version}"
    implementation "io.github.llamalad7:mixinextras-fabric:${mixinextras_version}" // Note: Despite it saying "fabric", its implementation is also for quilt
    // Extra libraries
    implementation "com.google.guava:guava:${guava_version}"
    implementation "com.google.code.gson:gson:${gson_version}"
    implementation "org.ow2.asm:asm:${asm_version}"
    implementation "org.ow2.asm:asm-util:${asm_version}"
    implementation "org.ow2.asm:asm-tree:${asm_version}"
    implementation "org.ow2.asm:asm-analysis:${asm_version}"
    implementation "org.ow2.asm:asm-commons:${asm_version}"
}

processResources {
    def resourceTargets = [ // Locations of where to inject the properties
            "quilt.mod.json"
    ]

    // Left item is the name in the target, right is the varuable name
    def replaceProperties = [
            "mod_version"     : project.version,
            "mod_group"       : project.group,
            "mod_name"        : project.name,
            "mod_id"          : id,
    ]


    inputs.properties replaceProperties
    replaceProperties.put "project", project
    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}


application {
    // As Quilt is our loader, use its main class at:
    mainClass = "org.quiltmc.loader.impl.launch.knot.KnotClient"
}

applicationDefaultJvmArgs = [
        "-Dloader.skipMcProvider=true",
        "-Dloader.gameJarPath=" + configurations.cosmicreach.asPath, // Defines path to Cosmic Reach
        "-Dloader.addMods=" + jar.archiveFile.get().asFile // Add the jar of this project
]
run {
    // To run this project in the game, depend on the creation of jar task
    dependsOn "jar"

    // Change the run directory
    File runningDir = new File("run/")
    if (!runningDir.exists())
        runningDir.mkdirs()
    tasks.run.workingDir = runningDir
}



java {
	withSourcesJar()
	// withJavadocJar() // If docs are included with the project, this line can be un-commented

    // Sets the Java version
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = id

		    from components.java
        }
    }

    repositories {

    }
}
